{"version":3,"sources":["Card.jsx","Deck.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","angle","Math","random","xPos","yPos","_transform","style","transform","this","className","src","image","alt","name","Component","Deck","state","deck","drawn","getCard","bind","axios","get","setState","data","deck_id","cardUrl","cardRes","success","Error","card","cards","st","id","code","value","suit","alert","map","c","key","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uVAuBeA,G,wDAnBd,WAAYC,GAAQ,IAAD,sBAClB,cAAMA,GACN,IAAIC,EAAwB,GAAhBC,KAAKC,SAAgB,GAC7BC,EAAuB,GAAhBF,KAAKC,SAAgB,GAC5BE,EAAuB,GAAhBH,KAAKC,SAAgB,GAJd,OAKlB,EAAKG,WAAL,oBAA+BF,EAA/B,eAA0CC,EAA1C,sBAA4DJ,EAA5D,QALkB,E,qDAQlB,OACC,yBACCM,MAAO,CAAEC,UAAWC,KAAKH,YACzBI,UAAU,OACVC,IAAKF,KAAKT,MAAMY,MAChBC,IAAKJ,KAAKT,MAAMc,W,GAdDC,c,gBC4DJC,G,wDAvDd,WAAYhB,GAAQ,IAAD,8BAClB,cAAMA,IACDiB,MAAQ,CAAEC,KAAM,KAAMC,MAAO,IAClC,EAAKC,QAAU,EAAKA,QAAQC,KAAb,gBAHG,E,gMAODC,IAAMC,IAAN,UAVE,sCAUF,kB,OAAbL,E,OACJT,KAAKe,SAAS,CAAEN,KAAMA,EAAKO,O,mQAIvBC,EAAUjB,KAAKQ,MAAMC,KAAKQ,Q,SAGzBC,E,UAlBc,sC,YAkBeD,E,kBACbJ,IAAMC,IAAII,G,WAA1BC,E,QACSH,KAAKI,Q,sBACX,IAAIC,MAAM,mB,OAEbC,EAAOH,EAAQH,KAAKO,MAAM,GAC9BvB,KAAKe,UAAS,SAAAS,GAAE,MAAK,CACpBd,MAAM,GAAD,mBACDc,EAAGd,OADF,CAEJ,CACCe,GAAIH,EAAKI,KACTvB,MAAOmB,EAAKnB,MACZE,KAAK,GAAD,OAAKiB,EAAKK,MAAV,eAAsBL,EAAKM,a,kDAKlCC,MAAM,EAAD,I,+IAKN,IAAMN,EAAQvB,KAAKQ,MAAME,MAAMoB,KAAI,SAAAC,GAAC,OACnC,kBAAC,EAAD,CAAMC,IAAKD,EAAEN,GAAIpB,KAAM0B,EAAE1B,KAAMF,MAAO4B,EAAE5B,WAEzC,OACC,6BACC,wBAAIF,UAAU,cAAd,eACA,wBAAIA,UAAU,uBAAd,iCAGA,4BAAQA,UAAU,WAAWgC,QAASjC,KAAKW,SAA3C,aAGA,yBAAKV,UAAU,YAAYsB,Q,GAlDZjB,c,MCKJ4B,MARf,WACC,OACC,yBAAKjC,UAAU,OACd,kBAAC,EAAD,QCKiBkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7991a01d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Card.css\";\n\nclass Card extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tlet angle = Math.random() * 90 - 45;\n\t\tlet xPos = Math.random() * 40 - 20;\n\t\tlet yPos = Math.random() * 40 - 20;\n\t\tthis._transform = `translate(${xPos}px, ${yPos}px) rotate(${angle}deg)`;\n\t}\n\trender() {\n\t\treturn (\n\t\t\t<img\n\t\t\t\tstyle={{ transform: this._transform }}\n\t\t\t\tclassName=\"Card\"\n\t\t\t\tsrc={this.props.image}\n\t\t\t\talt={this.props.name}\n\t\t\t/>\n\t\t);\n\t}\n}\n\nexport default Card;\n","import React, { Component } from \"react\";\nimport Card from \"./Card\";\nimport axios from \"axios\";\nimport \"./Deck.css\";\n\nconst API_BASE_URL = \"https://deckofcardsapi.com/api/deck\";\n\nclass Deck extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = { deck: null, drawn: [] };\n\t\tthis.getCard = this.getCard.bind(this);\n\t}\n\n\tasync componentDidMount() {\n\t\tlet deck = await axios.get(`${API_BASE_URL}/new/shuffle/`);\n\t\tthis.setState({ deck: deck.data });\n\t}\n\n\tasync getCard() {\n\t\tlet deck_id = this.state.deck.deck_id;\n\n\t\ttry {\n\t\t\tlet cardUrl = `${API_BASE_URL}/${deck_id}/draw`;\n\t\t\tlet cardRes = await axios.get(cardUrl);\n\t\t\tif (!cardRes.data.success) {\n\t\t\t\tthrow new Error(\"No Cards Remain\");\n\t\t\t}\n\t\t\tlet card = cardRes.data.cards[0];\n\t\t\tthis.setState(st => ({\n\t\t\t\tdrawn: [\n\t\t\t\t\t...st.drawn,\n\t\t\t\t\t{\n\t\t\t\t\t\tid: card.code,\n\t\t\t\t\t\timage: card.image,\n\t\t\t\t\t\tname: `${card.value} of ${card.suit}`\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}));\n\t\t} catch (err) {\n\t\t\talert(err);\n\t\t}\n\t}\n\n\trender() {\n\t\tconst cards = this.state.drawn.map(c => (\n\t\t\t<Card key={c.id} name={c.name} image={c.image} />\n\t\t));\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h1 className=\"Deck-title\">Card Dealer</h1>\n\t\t\t\t<h2 className=\"Deck-title subtitle\">\n\t\t\t\t\tA little demo made with React\n\t\t\t\t</h2>\n\t\t\t\t<button className=\"Deck-btn\" onClick={this.getCard}>\n\t\t\t\t\tGet Card!\n\t\t\t\t</button>\n\t\t\t\t<div className=\"cardArea\">{cards}</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Deck;\n","import React from \"react\";\nimport Deck from \"./Deck\";\nimport \"./App.css\";\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Deck />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}